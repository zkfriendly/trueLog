[description]
Biome is a rewrite of Rome, a JavaScript and TypeScript linter, formatter, and codemod tool. This project is focused on building a robust and performant toolchain for web development.

[milestones]
• HTML Parser and Formatter Implementation: Initial versions of HTML parser and formatter introduced, including support for basic tags, attributes, and comments. Formatting options like quote style and line breaks added. HTML support gated behind a feature flag.
• CSS Parser and Formatter Implementation: Basic CSS parser and formatter functionalities introduced. Support added for various at-rules, selectors, declarations, and properties. Initial support for CSS modules, variables, and functions.
• Grit Parser and Formatter Implementation: Initial support for Grit files and GritQL queries introduced. Formatting support added for lists, patterns, and predicates. Snippet node support in queries.
• GraphQL Parser and Linter: GraphQL parser implemented, and linting capabilities added. Support for parsing various definitions like schema, scalar, object, union, interface, and fragment. Linting rules for duplicate fields and deprecated reasons.
• Editorconfig Support: Re-enabled and expanded .editorconfig support, allowing developers to specify formatting and linting options directly in their editor configuration. Includes support for common options like indent style and width.
• JavaScript/TypeScript Linting Rules: Numerous new lint rules added, including useImportType, useExportType, useStrictMode, noControlCharactersInRegex, noUselessStringRaw, noProcessGlobal, noDuplicateProperties, and various ARIA-related checks. Many existing rules refined and improved, with new code actions and bug fixes. Focus on performance and code actions.
• File System Traversal and Configuration: Support for nested .gitignore files and improved glob pattern matching. Project-level configuration with extends and overrides for applying settings to specific files and directories. Support for `biome.jsonc`.
• CLI Improvements: New commands added, including `rage` for displaying information and `clean` for removing Biome cache. Improvements to diagnostics reporting and filtering. Addition of `--only`, `--skip`, `--write`, and `--fix` options. Focus on error reporting.
• Language Server Protocol (LSP) and VS Code Extension: Workspace support with diagnostics for multiple files. Improved handling of configuration errors and dynamic formatter registration. Support for Astro, Vue, and Svelte files in the LSP.
• JS API and WASM Support: Experimental JavaScript API and WebAssembly (WASM) support implemented, enabling use of Biome in browser environments. Improvements to diagnostics handling and file system interactions.
• Migration Tooling: Initial migration tooling added for converting Prettier configuration and ignore files to Biome. Work started on ESLint configuration migration.
• Documentation and Website: Biome website launched with updated documentation, examples, and recipes for various editors and use cases. New pages added for rules, language support, and editor integration.
• Initial Release of Rome Formatter (0.6.0): Basic formatting capabilities for JavaScript and TypeScript. Support for JSX and TSX formatting. Prettier compatibility metrics and tests.
• Linter and CLI Enhancements: Implementation of numerous lint rules (e.g., no-unused-variables, no-shadow, etc.) across various languages. Introduction of rule groups and severity levels. Extensible `declare_rule` macro for custom rule creation. Code actions for lint fixes (e.g., `inlineVariable`). CLI commands for linting (`check`, `ci`) and code fixing (`--apply-suggested`).
• Language Server and VS Code Extension: Development of a Language Server Protocol (LSP) server. Integration with VS Code for diagnostics, code actions, and formatting. Status bar item for LSP.
• Playground Development: Creation of a playground for interactive experimentation with Rome features. AST visualization and control flow graph display.
• Core Infrastructure and Performance Improvements: Refactoring of diagnostics to use markup. Replacement of the system allocator with mimalloc on Windows. Optimization of code action diff generation and formatter source map performance.
• Parsing Enhancements: Introduction of the `rome_rowan` crate for AST manipulation. Development of a JSX parser and error recovery mechanism. Support for parsing various TypeScript syntax constructs.
• CSS, JSON, and Markdown Support: Implementation of parsers and formatters for CSS, JSON, and Markdown. Lint rules for CSS.

[patterns]
• Focus on Parser and Formatter Feature Parity with Prettier: Significant effort towards ensuring Biome's formatter produces results consistent with Prettier. Many commits address specific edge cases and discrepancies in formatting output, especially in JSX, TypeScript, and JSON.
• Prioritization of Performance: Caching mechanisms introduced for file features, computed overrides, and resolved dependencies to reduce redundant computation. Use of more efficient data structures and algorithms in parsing and analysis. Several commits aimed at optimizing performance (e.g., printer source map, code action diff generation).
• Incremental Development of Linting Rules: Steady addition of new lint rules and refinement of existing rules based on user feedback and community contributions. Clear emphasis on providing code actions to automatically fix lint errors. Features like the formatter and LSP were gradually developed and improved over multiple commits.
• Strong Focus on Correctness and Bug Fixing: Numerous commits address reported bugs and edge cases in the parser, formatter, analyzer, and LSP. Emphasis on thorough testing and snapshot testing to prevent regressions. Introduction of snapshot tests and a Prettier compatibility test suite for the formatter.
• Migration from Rome to Biome: Consistent effort towards renaming code and updating documentation to reflect the project's new name and branding. Updates to configuration files and CLI options to support the Biome ecosystem.
• Growing Community Involvement: Increasing number of contributions from community members, including new lint rules, documentation improvements, and bug fixes. Active discussion on GitHub issues and Discord. Many commits were from community contributors, demonstrating a healthy and active open-source community.
• Automated Code Generation: Use of macros and code generation to automate repetitive tasks, such as generating boilerplate code for CSS properties and lint rule definitions. This pattern helps maintain consistency and reduces boilerplate. Code generation for formatter and documentation.
• Cross-Platform Compatibility: Focus on ensuring Biome works consistently across different operating systems, including Linux, macOS, and Windows. Addressing issues with path handling and file system interactions. Addition of musl target support.
• Continuous Integration and Delivery: Robust CI/CD pipeline using GitHub Actions for automated testing, linting, benchmarking, and release management. Workflows for publishing packages to npm and crates.io.
• Emphasis on Documentation and Developer Experience: Continuous improvement of documentation, including new guides, examples, and API references. Focus on providing clear and concise explanations of Biome's features and usage. Focus on accessibility.
• Potential Technical Debt Indicator: Early use of `println` and `dbg`, later removed, could indicate initial development haste or a need for more rigorous code review practices in early development phases.