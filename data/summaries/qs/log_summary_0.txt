[description]
qs is a querystring parsing and stringifying library with some added security.

[milestones]
• v6.14.0
    - Released on 2025-01-14
    - Includes dependency updates, test coverage increases, and refactoring.
• v6.13.1
    - Released on 2024-11-17
    - Includes dependency updates.
• v6.13.0
    - Released on 2024-08-01
    - Includes the addition of the `strictDepth` option for parsing.
• v6.12.3
    - Released on 2024-07-08
    - Includes a fix for `parse` to properly account for `strictNullHandling` with `allowEmptyArrays`.
• v6.12.2
    - Released on 2024-07-01
    - Includes dependency updates.
• v6.12.1
    - Released on 2024-04-12
    - Includes a fix for parsing with `decodeDotInKeys` enabled by default.
• v6.12.0
    - Released on 2024-03-06
    - Reduced the size of the dist build.
• v6.11.2
    - Released on 2023-05-15
• v6.11.1
    - Released on 2023-03-06
• v6.11.0
    - Released on 2022-06-26
    - Reverted a change from v6.10.5 and added the `commaRoundTrip` option.
• v6.10.5
    - Released on 2022-06-06
    - Includes a fix for stringify with `arrayFormat: comma`.
• v6.10.4
    - Released on 2022-06-06
    - Includes a fix for stringify with `arrayFormat: comma`.
• v6.10.3
    - Released on 2022-01-10
• v6.10.2
    - Released on 2021-12-05
• v6.10.1
    - Released on 2021-03-21
    - Includes a fix for `stringify` to avoid exceptions on repeated object values.
• v6.10.0
    - Released on 2021-03-18
    - `stringify` throws on cycles instead of infinite looping.
• v6.9.0
    - Released on 2019-09-21
    - Added `decodeDotInKeys`/`encodeDotKeys` options to `parse`/`stringify`.
• v6.8.0
    - Released on 2019-08-16
    - Added `depth=false` to preserve the original key and fixed `depth=0`.
• v6.7.0
    - Released on 2019-03-22
    - Added support for passing extra key/value arguments to the decoder.
• v6.6.0
    - Released on 2018-09-17
• v6.5.0
    - Released on 2017-06-27
• v6.4.0
    - Released on 2017-03-05
• v6.3.0
    - Released on 2016-10-14
• v6.2.0
    - Released on 2016-05-08
• v6.1.0
    - Released on 2016-02-03
• v6.0.0
    - Released on 2015-11-24
• v5.0.0
    - Released on 2015-08-27
• v4.0.0
    - Released on 2015-07-02
• v3.0.0
    - Released on 2015-05-22
• v2.0.0
    - Released on 2014-08-25
• v1.0.0
    - Released on 2014-07-30


[patterns]
• Regular Maintenance
    - Frequent dependency updates and changelog maintenance.
    - Indicates a well-maintained project.
• Focus on Bug Fixes and Performance
    - Many commits address specific bugs or performance issues in parsing and stringifying.
    - Shows commitment to functionality and efficiency.
• Test-Driven Development
    - Commits often include new tests or increased test coverage.
    - Suggests a focus on code quality and reliability.
• Refactoring and Code Improvements
    - Recurring refactoring commits aim to simplify and improve the codebase.
    - Contributes to long-term maintainability.
• Feature Additions
    - Introduction of new features and options based on user feedback and evolving needs.
    - Demonstrates responsiveness to the community.
• Documentation Updates
    - Regular updates to the README and other documentation.
    - Improves usability and understanding for users.
• Security Consciousness
    - Commits addressing security vulnerabilities and adding security-related documentation.
    - Reflects a commitment to secure coding practices.
• Build Process Optimization
    - Commits aimed at optimizing the build process and reducing build size.
    - Enhances efficiency and reduces package size for users.
